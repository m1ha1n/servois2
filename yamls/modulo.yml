name: modulo

state:
  - name: x
    type: Int

states_equal:
  definition: (and (= x_1 x_2))

methods:
  - name: m1
    args:
      - name: 'y'
        type: Int
      - name: 'n'
        type: Int
    return:
      - name: result
        type: Bool
    requires: (> n 0)
    ensures: |
      (and result
           (= x_new (mod (+ x y) n)))
    terms:
      Int: [x, 'y', 'n', (+ x y), (mod (+ x y) n)]
  - name: m2
    args: []
    return:
      - name: result
        type: Bool
    requires: |
      true
    ensures: |
      (and result
           (= x_new (* x 2)))
    terms:
      Int: [x, 2, (* x 2)]

predicates:
  - name: '='
    type: [Int, Int]
  # - name: '>'
  #   type: [Int, Int]